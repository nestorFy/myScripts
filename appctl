#!/usr/bin/env bash

# Start earnestly and accumulate
# The Script is for the operation management of the manage application, including
# start stop and restart jar service.
# My github address:
#			https://github.com/niu8753
# 	Current Version: 1.2
# 	Date:         	2019-01-30
# 	Author:       	Nestor(Peng.niu)
# 	Email:        	niu8753@163.com
# 	Notes:        	For CentOS 7+ only. Sprint Jar.
# 	Copyright:    	Nestor.

# -----------------------------------------------------------------------------
# Control Script for the Jar Server
# 
# Environment Variable Prerequisites
# 
#   Minimize the setting of parameters to keep the script simple
#
#	APP_HOME		May point at your app "exist" directory.
# 	
#	OPERATION_TYPE	(Optional) Base operational commands that
#					regulate use input.
#	
#	JAR_OPTS		(Optional) Jar running options used when the "start"
#					command is executed.
#					Only use '-jar' here, if you need other parameter, pleare
#					refer to java to use help
#
#	EXTRA_PARA		(Optional) Start service use selected the environment. 
#					for example:
#						--spring.profiles.active=dev,test,prod,inte
#
#   JAVA_HOME       Must point at your Java Development Kit installation.
#                   Required to run the with the "debug" argument.	
# 
# -----------------------------------------------------------------------------

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Global parameter setting
OPERATION_TYPE="start stop status"

# The file directory where the project application package is located
# Need to pay attention to the [APP_HOME] project path,
# The following needs to be userd.
APP_HOME="/home/user01/app"

# Extended parameter, now userd to start the specified configuration file
EXTRA_PARA="--spring.profiles.active=inte"

# Configure JAVA_HOME
JAVA_HOME=""

[ $# != 2 ] && \
    cat <<EOF
NAME
    appctl - unified startup script.

SYNOPSIS
    appctl [OPTION1] [OPTION2]

DESCRIPTION
    startup.sh is used to start the jar service.
    OpTIONS1 ---- operater command (status/stop/start)
                  start -- start service
                  stop  -- stop service
                  status -- display the service running status 
    OPTIONS2 ---- app name
				  The name of the application in the specified directory
EXAMPLE:
    check service status: appctl status gateway
           start service: appctl start discovery
            stop service: appctl stop discovery
Ps:
	The script should be placed under bin, otherwise the full path should be
	executed.
EOF

# Reference global variable [OPERATION_TYPE]
if [ $(echo ${OPERATION_TYPE}| grep $1| wc -l) == 0 ]; then
    echo "--> Parameter(Operation Type) Error. ### $1 ###"
    echo "--> ${OPERATION_TYPE}"
    exit 1
fi

APP_HOME="${APP_HOME}/$2"
if [ ! -d ${APP_HOME} ]; then
    echo "--> Current project ###  $2 ### not exist.. Please check it."
    echo "--> ${APP_HOME}"
    exit 1
fi

# Configure application parameter
APP_NAME="$2"
APP_HOME=${APP_HOME}"/"${APP_NAME}

# Determine if the jar file exists or is a valid file
jar_num=$(ls -l ${APP_HOME} | grep jar| wc -l)
if [ $jar_num != 1 ]; then
    echo "--> The jar file does not exist or there is more than one, 
    Please check the directory ${APP_HOME}." && exit 1
else
    APP_INFO="${APP_HOME}/*.jar"
fi

# Make sure prerequisite environment variables are set
if [ -z "${JAVA_HOME}" ]; then
  JAVA_PATH=$(which java 2>/dev/null)
  if [ "x${JAVA_PATH}" != "x" ]; then
    JAVA_HOME=$(dirname "${JAVA_PATH}" 2>/dev/null)
  fi
fi

#
JAR_OPTS=" -jar "

# Check if the app is running
check_running() {
    service_pid=$(ps -ef|grep java|grep ${APP_NAME}|awk '{print $2}')
    # The existence process returns 0,otherwise it returns 1
    if [ -z ${service_pid} ]; then 
		return 1
	else 
		return 0
	fi
}

# Start service
if [ "$1" == "start" ]; then
    echo $"Starting the ${APP_NAME} service..."
    check_running
    if [ "$?" -eq "0" ]; then
        echo $"${APP_NAME} is already running, Pid is ${service_pid}"
    else
        ${JAVA_HOME}/bin/java ${JAR_OPTS} ${APP_INFO}  ${EXTRA_PARA} >> \
		${APP_HOME}/${APP_NAME}.log 2>&1 &
    fi
    exit 0
fi

# Stop service
if [ "$1" == "stop" ]; then
    echo $"Stopping the ${APP_NAME} service..."
    check_running
    if [ "$?" -eq "0" ]; then
        kill -9 ${service_pid}
        echo $"${APP_NAME} is stopped!"
    else
        echo $"${APP_NAME} had been stopped!"
    fi
    exit 0
fi

# Display running status
if [ "$1" == "status" ]; then
    check_running
    if [ "$?" -eq "0" ]; then
        echo $"${APP_NAME} is running. Pid is ${service_pid}"
    else
        echo $"${APP_NAME} is not running."
    fi
    exit 0
fi

